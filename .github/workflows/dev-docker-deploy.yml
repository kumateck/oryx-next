name: Build and Deploy Docker Image

on:
  push:
    branches:
      - main

env:
  DOCKER_IMAGE_NAME: kumateck/dev-oryx-erp-web
  CONTAINER_NAME: dev-oryx-erp-web
  HOST_PORT: 3005
  CONTAINER_PORT: 3000

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          push: true
          file: dev.Dockerfile  
          tags: ${{ env.DOCKER_IMAGE_NAME }}:latest
          no-cache: true  

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Install SSH Client
        run: sudo apt-get install -y openssh-client

      - name: Deploy to Server
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          DOCKER_IMAGE_NAME: ${{ env.DOCKER_IMAGE_NAME }}
          CONTAINER_NAME: ${{ env.CONTAINER_NAME }}
          HOST_PORT: ${{ env.HOST_PORT }}
          CONTAINER_PORT: ${{ env.CONTAINER_PORT }}
        run: |
          mkdir -p ~/.ssh
          echo "${SSH_PRIVATE_KEY}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

          ssh -o StrictHostKeyChecking=no "${{ secrets.SSH_USERNAME }}"@"${{ secrets.SSH_HOST }}" -p "${{ secrets.SSH_PORT }}" << EOF
            echo "Logging in to Docker Hub"
            docker login -u '${{ secrets.DOCKER_USERNAME }}' -p '${{ secrets.DOCKER_PASSWORD }}'

            echo "Pulling the latest Docker image: ${DOCKER_IMAGE_NAME}:latest"
            docker pull "${DOCKER_IMAGE_NAME}:latest"

            echo "Stopping and removing the existing container if it exists"
            if [ \$(docker ps -a | grep "${CONTAINER_NAME}" | wc -l) -gt 0 ]; then
              docker stop "${CONTAINER_NAME}"
              docker rm "${CONTAINER_NAME}"
            fi

            echo "Pruning unused Docker images"
            docker image prune -a -f

            echo "Running the new Docker container on the external 'sail' network"
            docker run -d --restart always --net sail -p "${HOST_PORT}:${CONTAINER_PORT}" --name "${CONTAINER_NAME}" "${DOCKER_IMAGE_NAME}:latest"
          EOF
